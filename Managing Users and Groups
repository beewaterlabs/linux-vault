# Managing Users and Groups

Accounts have a:

Username (or login ID).
UID (user ID). Unique identifying number.
Default group.
Comments.
Home Directory location.
Shell.

Seven fields represented:

username:password:UID:GID:comments:home_dir:shell

All stored in the following directory:      /etc/passwd

Stay under 8 characters to avoid UID showing in the output of the ps command and othr outputs..

By default, the encrypted password information is stored in /etc/shadow which is only readable by the superuser account.

Root account is always UID 0.

System accounts have UIDs < 1000
  Configured in:    /etc/login.defs

# GID

The group ID, or GID, listed in the password file entry for the account is the account's default group.
When a user creates a file, that file will belong to the user's default group.
If a user wants to create files using another group, they can use the following command:

newgrp

# Comment Field

The comment field usualy contains the user's real name or a description of what the account is used for.
You'll sometimes hear this field refered to as the GECOS field.
This is a historical hold over from the early years of Unix.

# Shell

The shell will be executed when the user logs into the system with their account.
You can see a list of installed shells on your Linux system here:

/etc/shells

+++++++Fedors-VM+++++++
[root@fedora ~]# cat /etc/shells 
/bin/sh
/bin/bash
/usr/bin/sh
/usr/bin/bash
+++++++Fedors-VM+++++++

Whatever is listed in the shell field will be executed upon login even if the program is not actually a shell.
For example, you may see:

'/usr/sbin/nologin' or '/bin/false' in the shell field for certain accounts.

This ensures that no one can use those accounts interactively.

You can also use the shell field to execute a program when a user logs into the system.
For example, you could force users into a menu driven application
that only allows them access to certain actions.

Like the '/etc/passwd' file, the '/etc/shadow' file contains a series of fields separated by a colon.

* The first field is the username.
* The second field contains the encrypted password.
* The third field is the number of days since January 1, 1970 since the password has been changed. (Why date? look into this: [])
* The fourth field is the number of days before the password can be changed.
* The fifth field is the number of days after which the password must be changed.
    If this field contains 99999, the user never has to change their password.
* The sixth field is the number of days to warn the user that their password will expire.
* The seventh field is the number of days after the password has expired that the account is disabled.
* The eighth field is the number of days since Janary 1, 1970 that an account has been disabled.
* The ninth field is reserved for future use.

# Create User:

useradd -c "Grant Stewart" -m -s /bin/bash grant

# Assign the account a password:

passwd grant

# Account information for user "grant":

tail -1 /etc/passwd

+++++++Fedors-VM+++++++
[root@fedora ~]# tail -1 /etc/passwd
grant:x:1001:1001:Grant Stewart:/home/grant:/bin/bash
+++++++Fedors-VM+++++++

tail -1 /etc/shadow

+++++++Fedors-VM+++++++
[root@fedora ~]# tail -1 /etc/shadow
grant:$6$DW6Ry5jHPiYcP2VM$g03uitdmf1KZQLdoSl1vJwNpqnXTgf3v6jZzhrcyG.JnKyQ7TQTBWK.xKOxzapTCjR3hLcp3OeB0hupq5Dub/0:20097:0:99999:7:::
+++++++Fedors-VM+++++++

# More useradd options

-g GROUP            Specify the default group.
-G GROUP1,GROUPN    Additional groups.

groupadd --gid 1000 sales
groupadd --gid 4100 projectx
useradd -c "Eddie Harris" -m -s /bin/bash -g sales -G projectx eharris
passwd eharris
# Enter passwd x2:
passwd: all authentication tokens updated successfully.

# System or Application Accounts:

useradd -c "Apache Web Server User" -d /opt/apache -r -s /usr/sbin/nologin apache

[root@fedora ~]# tail -1 /etc/passwd
apache:x:985:980:Apache Web Server User:/opt/apache:/usr/sbin/nologin

-r                Create a system account.
-d /home/dir      Specify the home directory.

# Use -u to specify the UID:

useradd -c "MySQL Server" -d /opt/mysql -u 97 -s /usr/sbin/nologin mysql
[root@fedora ~]# tail -1 /etc/passwd
mysql:x:97:4101:MySQL Server:/opt/mysql:/usr/sbin/nologin

# Delete user account:

[root@fedora ~]# ls /home
adminuser  eharris  grant

userdel eharris                        Deletes account, leave the home dir intact as there are files.

[root@fedora ~]# userdel -r grant      Deletes user and home dir.
[root@fedora ~]# ls /home
adminuser  eharris

# Update or modify user accounts:

usermod [options] username

-c "COMMENT"        Comments account.
-g GROUP            Specify the default group.
-G GROUP1,GROUPN    Additional groups.
-s /shell/path      Path to the user's shell.

# Group add: Use when needed in live environment, update notes: []

https://external-teksystems.udemy.com/course/linux-administration-bootcamp/learn/lecture/5720644#overview

# Add group:

groupadd writers; groupadd tv; groupadd movie

tail -3 /etc/group

[root@fedora ~]# groupadd writers; groupadd tv; groupadd movie
tail -3 /etc/group
writers:x:4102:
tv:x:4103:
movie:x:4104:

# Lesson continued:
# Update notes with live examples when needed: []


In this demonstration we are going to create a writers group,

a tv group, and a movie group.

Next we are going to create some user accounts.

All of these user accounts will belong to the writers groups,

but only some of them will belong to the tv group,

while the others will belong to the movie group.

Let's create the writers group by using 'groupadd writers'.

We'll do the same thing with 'tv'.

And finally movie.

Now you can see that the last three entries

in the /etc/group file are the three accounts

we just created.

You'll notice that the GID or group IDs are incremented

by one automatically by the groupadd command.

Let's go ahead and create the first of our users.

We'll put the comment as this user's name.

The primary group will be writers, so '-g writers'.

The additional group will be 'tv'.

We'll use '-m' to make sure the home directory gets created.

And will specify shell with '-s'.

In this case we'll give this user the /bash.

And finally we need to provide a username or login ID.

So we'll use first initial lastname in this example.

# useradd -c "Carlton Cuse" -g writers -G tv -m -s /bin/bash ccuse

So I can create a password for this user:

[root@fedora ~]# passwd ccuse
Changing password for user ccuse.
New password: 
Retype new password: 
passwd: all authentication tokens updated successfully.

Let's see what groups this user is in:

[root@fedora ~]# groups ccuse
ccuse : writers tv

You can see that the user is in writers and tv group, ust like we specified in the useradd command.

Let's go ahead and add another user.

I'll put him in the writer's group as well.

He is a tv writer, so put him in the television group or tv group.

Create his home directory

and give him the bash shell as well.

Ok. That looks good.

Let's add another user.

Additional group for this user will be movie.

Okay, you can see that he is in the writers and movie group.

Let's add one final writer.

'-g' for the primary group, let's use writers,

'-G' for any additional groups, movie.

We can...

Let's add this person to 2 groups,

I want to add to the movie and tv group.

There you can see that this user is in three groups.

Now if we look at the /etc/group file,

whoops!

I need to type 3 there.

Now we can see the list of members in the tv and movie groups,

however we do not see any users and the members list for writers.

But we know that those users are in that group

because we typed groups.

'ccuse', you can see that he's in the writer's group.

Well, if we search for that GID

in the /etc/password file,

we can confirm that each of these user's primary groups

are 1002, which corresponds to the GID of the writers group

and that's why they are included in the writer's group

even though their usernames are not listed in the /etc/group file.

Account information is stored in the /etc/passwd and /etc/shadow files.

In addition to a username,

each account consists of a unique number called the UID,

a default group, a comment,

a home directory location, and a login shell.

Accounts can be created with the 'useradd' command.

To delete an account use the 'userdel' command.

Modifying accounts can be accomplished by using the 'usermod' command.

Group information is stored in the /etc/group file.

To create a group, use the 'groupadd' command.

You can delete groups by using the 'groupdel' command.

To update an existing group use the 'groupmod' command.

To list group memberships for an account, use the 'groups' command.

