# Shell Scripts

vi script.sh

#!/bin/bash
echo "Scripting is fun!"

chmod 755 script.sh

./script.sh

[root@fedora ~]# ./script.sh 
Scripting is fun!

# Tests:

help test

test: test [expr]
    Evaluate conditional expression.
    
    Exits with a status of 0 (true) or 1 (false) depending on
    the evaluation of EXPR.  Expressions may be unary or binary.  Unary
    expressions are often used to examine the status of a file.  There
    are string operators and numeric comparison operators as well.
    
    The behavior of test depends on the number of arguments.  Read the
    bash manual page for the complete specification.
    
    File operators:
    
      -a FILE        True if file exists.
      -b FILE        True if file is block special.
      -c FILE        True if file is character special.
      -d FILE        True if file is a directory.
      -e FILE        True if file exists.
      -f FILE        True if file exists and is a regular file.
      -g FILE        True if file is set-group-id.
      -h FILE        True if file is a symbolic link.
      -L FILE        True if file is a symbolic link.
      -k FILE        True if file has its `sticky' bit set.
      -p FILE        True if file is a named pipe.
      -r FILE        True if file is readable by you.
      -s FILE        True if file exists and is not empty.
      -S FILE        True if file is a socket.
      -t FD          True if FD is opened on a terminal.
      -u FILE        True if the file is set-user-id.
      -w FILE        True if the file is writable by you.
      -x FILE        True if the file is executable by you.
      -O FILE        True if the file is effectively owned by you.
      -G FILE        True if the file is effectively owned by your group.
      -N FILE        True if the file has been modified since it was last read.
    
      FILE1 -nt FILE2  True if file1 is newer than file2 (according to
                       modification date).
    
      FILE1 -ot FILE2  True if file1 is older than file2.
    
      FILE1 -ef FILE2  True if file1 is a hard link to file2.
    
    String operators:
    
      -z STRING      True if string is empty.
    
      -n STRING
         STRING      True if string is not empty.
    
      STRING1 = STRING2
                     True if the strings are equal.
      STRING1 != STRING2
                     True if the strings are not equal.
      STRING1 < STRING2
                     True if STRING1 sorts before STRING2 lexicographically.
      STRING1 > STRING2
                     True if STRING1 sorts after STRING2 lexicographically.
    
    Other operators:
    
      -o OPTION      True if the shell option OPTION is enabled.
      -v VAR         True if the shell variable VAR is set.
      -R VAR         True if the shell variable VAR is set and is a name
                     reference.
      ! EXPR         True if expr is false.
      EXPR1 -a EXPR2 True if both expr1 AND expr2 are true.
      EXPR1 -o EXPR2 True if either expr1 OR expr2 is true.
    
      arg1 OP arg2   Arithmetic tests.  OP is one of -eq, -ne,
                     -lt, -le, -gt, or -ge.
    
    Arithmetic binary operators return true if ARG1 is equal, not-equal,
    less-than, less-than-or-equal, greater-than, or greater-than-or-equal
    than ARG2.
    
    Exit Status:
    Returns success if EXPR evaluates to true; fails if EXPR evaluates to
    false or an invalid argument is given.

# Making Decisions - The if statement:

if [ condition-is-true ]
then
  command 1
  command 2
  command N
fi

# Example script:

#!/bin/bash

MY_SHELL="bash"

if [ "MY_SHELL" = "bash" ]
then
    echo "You seem to like the bash shell."
fi

## I've created a script for symbolic link checking: if_script_file_is_symlink_check.sh

#!/bin/bash

# True if file is a symbolic link.

if [ -h /root/if_script_file_is_symlink_check.sh ]
then
    echo "This file is a symbolic link."
else
    echo "Not a symbolic link."
fi

[user@fedora ~]# ./if_script_file_is_symlink_check.sh 
Not a symbolic link.

# To create a symbolic link:

ln -s /bin/bash /bin/symlink-sh

# This command creates a symbolic link /bin/symlink-sh that points to /bin/bash.

## Symbolic link checker script, pointing to the symbolic link created above: if_script_file_is_symlink_check1.sh

#!/bin/bash

# True if file is a symbolic link.

if [ -h /bin/symlink-sh ]
then
    echo "This file is a symbolic link."
else
    echo "Not a symbolic link."
fi

[user@fedora ~]# ./if_script_file_is_symlink_check1.sh 
This file is a symbolic link.

# elif script example: elif-script.sh

#!/bin/bash

MY_SHELL="csh"

if [ "MY_SHELL" = "bash" ]
then
  echo "You seem to like the bash shell."
elif [ "MY_SHELL" = "csh" ]
then
  echo "You seem to like the csh shell."
else
  echo "You don't seem to like the bash or csh shells."
fi

[user@fedora ~]# ./elif-script.sh 
You don't seem to like the bash or csh shells.

# For loop logic:

for VARIABLE_NAME in ITEM_1 ITEM_N
do
  command 1
  command 2
  command N
done

# Example For loop script:

#!/bin/bash

for COLOR in red green blue
do
  echo "COLOR: $COLOR"
done

[admin@fedora ~]# ./for-loop-color.sh 
COLOR: red
COLOR: green
COLOR: blue

# Another for loop:

[root@fedora ~]# cat for-loop-Ramones.sh 
#!/bin/bash

for RAMONES in Joey Jonny DeeDee Tommy
do
  echo "RAMONES: $RAMONES"
done

[root@fedora ~]# ./for-loop-Ramones.sh 
RAMONES: Joey
RAMONES: Jonny
RAMONES: DeeDee
RAMONES: Tommy





1. 
2.
3.
4.








